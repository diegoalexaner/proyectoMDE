package diagrama.model;

import java.io.File;
import java.io.FileWriter;
import javax.swing.JOptionPane;
import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.DirectoryDialog;
import org.eclipse.swt.widgets.Shell;
import abstracta.AtributoAbstracta;
import abstracta.ClaseAbstracta;
import abstracta.MetodoAbstracta;
import abstracta.ModelFactoryAbstracta;
import abstracta.PaqueteAbstracta;
import abstracta.ParametroAbstracta;
import abstracta.RelacionAbstracta;
import concreta.ModelFactory;

public class TransformacionM2T {

	private ModelFactory modelFactoryConcreta;
	private abstracta.ModelFactoryAbstracta modelFactoryAbstracta;

	public TransformacionM2T(ModelFactory modelFactoryConcreta, ModelFactoryAbstracta modelFactoryAbstracta) {
		super();
		this.modelFactoryConcreta = modelFactoryConcreta;
		this.modelFactoryAbstracta = modelFactoryAbstracta;
	}

	public void transformaModel2Texto() {


		DirectoryDialog fd = new DirectoryDialog(new Shell(), SWT.SELECTED);
		fd.setText("Version Path");
		//fd.setFilterPath(path);
		String rutaSeleccionada = fd.open();

		if(rutaSeleccionada.equals("")) {
			JOptionPane.showMessageDialog(null,"Seleccionar una ruta" );
			return;
		}

		PaqueteAbstracta paqueteAbstracta = modelFactoryAbstracta.getListaPaquetes().get(0);

		for (ClaseAbstracta claseAbstracta : paqueteAbstracta.getListaClases()) {
			StringBuilder cadena = new StringBuilder();
			//	cadena.append("package "+claseAbstracta.getRuta()+";\n\n");
			agregarImports(cadena);
			agregarEncabezado(cadena,claseAbstracta);
			agregarAtributos(cadena,claseAbstracta);
			agregarMetodoConstructor(cadena,claseAbstracta);
			agregarMetodosSetYGet(cadena,claseAbstracta);
			agregarMetodos(cadena,claseAbstracta);	
			cadena.append("\n");
			String ruta = rutaSeleccionada+"/"+claseAbstracta.getRuta();
			ruta = ruta.replace("\\","/")+"";
			String nombreArchivo = claseAbstracta.getNombre()+".py"; 
			guardarArchivo(cadena.toString(),ruta,nombreArchivo);

		}

	}

	private void guardarArchivo(String cadena, String ruta , String nombre) {
		try
		{
			//Crear un objeto File se encarga de crear o abrir acceso a un archivo que se especifica en su constructor

			File archivo=new File(ruta);
			System.out.println("");
			if(archivo.exists() == false) {
				archivo.mkdirs();
			}
			//Crear objeto FileWriter que sera el que nos ayude a escribir sobre archivo
			FileWriter escribir=new FileWriter(archivo+"/"+nombre,true);
			//Escribimos en el archivo con el metodo write 
			escribir.write(cadena);

			//Cerramos la conexion
			escribir.close();
		}

		//Si existe un problema al escribir cae aqui
		catch(Exception e)
		{
			System.out.println("Error al Guardar");
		}
	}

	private void agregarImports(StringBuilder cadena) {
		cadena.append("import sys\n\n");
	}

	private void agregarEncabezado(StringBuilder cadena, ClaseAbstracta claseAbstracta) {
		if(claseAbstracta.getListaRelacionesHerencia().size()>0) {
			String herencia= claseAbstracta.getListaRelacionesHerencia().get(0).getTarget().getNombre();
			if(!claseAbstracta.getNombre().equals(herencia)) {
				System.out.println("Entro en herencia");
				cadena.append("class "+claseAbstracta.getNombre()+"(" + herencia +"):\n\n");
			}else {
				cadena.append("class "+claseAbstracta.getNombre()+":\n\n");
			}
		}else {
			cadena.append("class "+claseAbstracta.getNombre()+":\n\n");
		}
	}


	private void agregarMetodoConstructor(StringBuilder cadena, ClaseAbstracta claseAbstracta) {
		cadena.append("	def __init__(self,");
		for (AtributoAbstracta atributoAbstracta : claseAbstracta.getListaAtributos()) {
			cadena.append( " "+atributoAbstracta.getNombre()+"");
			if(claseAbstracta.getListaAtributos().get(claseAbstracta.getListaAtributos().size()-1) != atributoAbstracta ) {
				cadena.append(",");
			}
		}
		cadena.append("):\n");
		for (AtributoAbstracta atributoAbstracta : claseAbstracta.getListaAtributos()) {
			cadena.append("		self."+atributoAbstracta.getNombre()+" = "+atributoAbstracta.getNombre()+"\n");
		}
		cadena.append("\n");
	}

	//Es necesario poner los atributos? 
	private void agregarAtributos(StringBuilder cadena, ClaseAbstracta claseAbstracta) {

		for (RelacionAbstracta relacion : claseAbstracta.getListaRelaciones()) {
			if(relacion.getMultiplicidadB().equals("*")) {
				cadena.append("	"+relacion.getRolB()+ " " +"= []\n");
				//>>> lista_1 = []  # Opción 1

				System.out.println("entro");
			}
		}
		//		for (AtributoAbstracta atributoAbstracta : claseAbstracta.getListaAtributos()) {
		//			cadena.append("private "+ "atributoAbstracta.getTipo()" +" "+atributoAbstracta.getNombre()+";\n");
		//		}
	}

	//Metodo sin parametros

	//	private void agregarMetodos(StringBuilder cadena, ClaseAbstracta claseAbstracta) {
	//		cadena.append("#Metodos\n");
	//		for (MetodoAbstracta metodoAbstracta : claseAbstracta.getListaMetodos()) {
	//			cadena.append("	def " + metodoAbstracta.getNombre()+"(self):\n");
	//			cadena.append("		"+ metodoAbstracta.getSentencias());
	//
	//			if(metodoAbstracta.getValorRetorno()!=null) {
	//				cadena.append("\n		return " + "self." + metodoAbstracta.getValorRetorno());
	//			}else {
	//				cadena.append("\n");
	//				System.out.println("Entro");
	//			}
	//			cadena.append("\n\n");
	//		}
	//	}

	//Metodo con parametros

	private void agregarMetodos(StringBuilder cadena, ClaseAbstracta claseAbstracta) {
		cadena.append("#Metodos\n");
		for (MetodoAbstracta metodoAbstracta : claseAbstracta.getListaMetodos()) {
			if(metodoAbstracta.getListaParametros().size()==0) {
				cadena.append("	def " + metodoAbstracta.getNombre()+"(self):\n");
			}else {
				cadena.append("	def " + metodoAbstracta.getNombre()+"(self, ");

				for(ParametroAbstracta parametrosAbs:metodoAbstracta.getListaParametros()) {
					cadena.append(parametrosAbs.getNombre());
					if(metodoAbstracta.getListaParametros().get(metodoAbstracta.getListaParametros().size()-1) != parametrosAbs ) {
						cadena.append(", ");
					}				
				}
				cadena.append("):\n");
			}
			if(metodoAbstracta.getSentencias()!=null) {
				cadena.append("		"+ metodoAbstracta.getSentencias());
			}

			if(metodoAbstracta.getValorRetorno()!=null) {
				cadena.append("\n		return " + "self." + metodoAbstracta.getValorRetorno());
			}else {
				cadena.append("\n");
			}
			cadena.append("\n\n");
		}
	}

	private void agregarMetodosSetYGet(StringBuilder cadena, ClaseAbstracta claseAbstracta) {
		// TODO Auto-generated method stub
		cadena.append("#getters y setters\n");
		for (AtributoAbstracta atributoAbstracta : claseAbstracta.getListaAtributos()) {
			//Setters
			String nombreMetodo= atributoAbstracta.getNombre().substring(0, 1).toUpperCase() + atributoAbstracta.getNombre().substring(1);
			cadena.append("	def set"+nombreMetodo+"(self, "+ atributoAbstracta.getNombre()+ "):\n");
			cadena.append("		self." + atributoAbstracta.getNombre() +"="+ atributoAbstracta.getNombre());
			cadena.append("\n\n");
			//Getters
			cadena.append("	def get"+nombreMetodo+"(self):\n");
			cadena.append("		return self." + atributoAbstracta.getNombre());
			cadena.append("\n\n");
		}
	}
}
