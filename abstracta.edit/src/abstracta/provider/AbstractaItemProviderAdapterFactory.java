/**
 */
package abstracta.provider;

import abstracta.util.AbstractaAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class AbstractaItemProviderAdapterFactory extends AbstractaAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AbstractaItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link abstracta.ModelFactoryAbstracta} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelFactoryAbstractaItemProvider modelFactoryAbstractaItemProvider;

	/**
	 * This creates an adapter for a {@link abstracta.ModelFactoryAbstracta}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelFactoryAbstractaAdapter() {
		if (modelFactoryAbstractaItemProvider == null) {
			modelFactoryAbstractaItemProvider = new ModelFactoryAbstractaItemProvider(this);
		}

		return modelFactoryAbstractaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link abstracta.PaqueteAbstracta} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PaqueteAbstractaItemProvider paqueteAbstractaItemProvider;

	/**
	 * This creates an adapter for a {@link abstracta.PaqueteAbstracta}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPaqueteAbstractaAdapter() {
		if (paqueteAbstractaItemProvider == null) {
			paqueteAbstractaItemProvider = new PaqueteAbstractaItemProvider(this);
		}

		return paqueteAbstractaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link abstracta.ClaseAbstracta} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClaseAbstractaItemProvider claseAbstractaItemProvider;

	/**
	 * This creates an adapter for a {@link abstracta.ClaseAbstracta}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClaseAbstractaAdapter() {
		if (claseAbstractaItemProvider == null) {
			claseAbstractaItemProvider = new ClaseAbstractaItemProvider(this);
		}

		return claseAbstractaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link abstracta.AtributoAbstracta} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AtributoAbstractaItemProvider atributoAbstractaItemProvider;

	/**
	 * This creates an adapter for a {@link abstracta.AtributoAbstracta}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAtributoAbstractaAdapter() {
		if (atributoAbstractaItemProvider == null) {
			atributoAbstractaItemProvider = new AtributoAbstractaItemProvider(this);
		}

		return atributoAbstractaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link abstracta.ParametroAbstracta} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParametroAbstractaItemProvider parametroAbstractaItemProvider;

	/**
	 * This creates an adapter for a {@link abstracta.ParametroAbstracta}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParametroAbstractaAdapter() {
		if (parametroAbstractaItemProvider == null) {
			parametroAbstractaItemProvider = new ParametroAbstractaItemProvider(this);
		}

		return parametroAbstractaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link abstracta.MetodoAbstracta} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MetodoAbstractaItemProvider metodoAbstractaItemProvider;

	/**
	 * This creates an adapter for a {@link abstracta.MetodoAbstracta}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMetodoAbstractaAdapter() {
		if (metodoAbstractaItemProvider == null) {
			metodoAbstractaItemProvider = new MetodoAbstractaItemProvider(this);
		}

		return metodoAbstractaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link abstracta.RelacionAbstracta} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RelacionAbstractaItemProvider relacionAbstractaItemProvider;

	/**
	 * This creates an adapter for a {@link abstracta.RelacionAbstracta}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelacionAbstractaAdapter() {
		if (relacionAbstractaItemProvider == null) {
			relacionAbstractaItemProvider = new RelacionAbstractaItemProvider(this);
		}

		return relacionAbstractaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link abstracta.ContainmentAbstracta} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContainmentAbstractaItemProvider containmentAbstractaItemProvider;

	/**
	 * This creates an adapter for a {@link abstracta.ContainmentAbstracta}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContainmentAbstractaAdapter() {
		if (containmentAbstractaItemProvider == null) {
			containmentAbstractaItemProvider = new ContainmentAbstractaItemProvider(this);
		}

		return containmentAbstractaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link abstracta.HerenciaAbstracta} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HerenciaAbstractaItemProvider herenciaAbstractaItemProvider;

	/**
	 * This creates an adapter for a {@link abstracta.HerenciaAbstracta}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHerenciaAbstractaAdapter() {
		if (herenciaAbstractaItemProvider == null) {
			herenciaAbstractaItemProvider = new HerenciaAbstractaItemProvider(this);
		}

		return herenciaAbstractaItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (modelFactoryAbstractaItemProvider != null) modelFactoryAbstractaItemProvider.dispose();
		if (paqueteAbstractaItemProvider != null) paqueteAbstractaItemProvider.dispose();
		if (claseAbstractaItemProvider != null) claseAbstractaItemProvider.dispose();
		if (atributoAbstractaItemProvider != null) atributoAbstractaItemProvider.dispose();
		if (parametroAbstractaItemProvider != null) parametroAbstractaItemProvider.dispose();
		if (metodoAbstractaItemProvider != null) metodoAbstractaItemProvider.dispose();
		if (relacionAbstractaItemProvider != null) relacionAbstractaItemProvider.dispose();
		if (containmentAbstractaItemProvider != null) containmentAbstractaItemProvider.dispose();
		if (herenciaAbstractaItemProvider != null) herenciaAbstractaItemProvider.dispose();
	}

}
